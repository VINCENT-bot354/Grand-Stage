{"file_contents":{"app.py":{"content":"import os\nimport logging\nfrom flask import Flask\nfrom flask_sqlalchemy import SQLAlchemy\nfrom sqlalchemy.orm import DeclarativeBase\nfrom werkzeug.middleware.proxy_fix import ProxyFix\nfrom flask_login import LoginManager\n\n# Configure logging\nlogging.basicConfig(level=logging.DEBUG)\n\nclass Base(DeclarativeBase):\n    pass\n\ndb = SQLAlchemy(model_class=Base)\n\n# Create the app\napp = Flask(__name__)\napp.secret_key = os.environ.get(\"SESSION_SECRET\")\napp.wsgi_app = ProxyFix(app.wsgi_app, x_proto=1, x_host=1)\n\n# Configure the database\napp.config[\"SQLALCHEMY_DATABASE_URI\"] = os.environ.get(\"DATABASE_URL\")\napp.config[\"SQLALCHEMY_ENGINE_OPTIONS\"] = {\n    \"pool_recycle\": 300,\n    \"pool_pre_ping\": True,\n}\n\n# Configure Flask-Login\nlogin_manager = LoginManager()\nlogin_manager.init_app(app)\nlogin_manager.login_view = 'admin_login'\nlogin_manager.login_message = 'Please log in to access the admin panel.'\nlogin_manager.login_message_category = 'info'\n\n# Initialize the app with the extension\ndb.init_app(app)\n\n@login_manager.user_loader\ndef load_user(user_id):\n    from models import Admin\n    return Admin.query.get(int(user_id))\n\nwith app.app_context():\n    # Make sure to import the models here or their tables won't be created\n    import models  # noqa: F401\n    db.create_all()\n    \n    # Create default admin user if none exists\n    from models import Admin, SiteSettings, PageContent\n    from werkzeug.security import generate_password_hash\n    \n    if not Admin.query.first():\n        admin = Admin(\n            username='admin',\n            email='admin@grandstageprod.com',\n            password_hash=generate_password_hash('admin123')\n        )\n        db.session.add(admin)\n        db.session.commit()\n        logging.info(\"Default admin user created: admin/admin123\")\n    \n    # Create default site settings if none exist\n    if not SiteSettings.query.first():\n        settings = SiteSettings(\n            site_title='Grand Stage Productions',\n            site_slogan='Bringing Stories to Life',\n            logo_url='/static/images/default-logo.svg',\n            contact_email='info@grandstageprod.com',\n            contact_phone='(555) 123-4567',\n            instagram_url='https://instagram.com/grandstageprod',\n            facebook_url='https://facebook.com/grandstageprod',\n            twitter_url='https://twitter.com/grandstageprod',\n            whatsapp_url='https://wa.me/15551234567'\n        )\n        db.session.add(settings)\n        db.session.commit()\n        logging.info(\"Default site settings created\")\n    \n    # Create default page content if none exists\n    pages = ['home', 'about', 'gallery', 'contact']\n    for page_name in pages:\n        if not PageContent.query.filter_by(page_name=page_name).first():\n            if page_name == 'home':\n                content = \"\"\"\n                <div class=\"hero-section text-center py-5\">\n                    <h1 class=\"display-4 text-theatrical mb-4\">Welcome to Grand Stage Productions</h1>\n                    <p class=\"lead\">Where every performance tells a story, and every story comes to life on stage.</p>\n                    <p>Grand Stage Productions is dedicated to bringing the magic of theater to our community. From classic dramas to contemporary comedies, we create unforgettable experiences that transport audiences to different worlds.</p>\n                </div>\n                \"\"\"\n            elif page_name == 'about':\n                content = \"\"\"\n                <h2 class=\"text-theatrical mb-4\">About Grand Stage Productions</h2>\n                <p>Founded with a passion for storytelling, Grand Stage Productions has been entertaining audiences with high-quality theatrical performances. Our company brings together talented actors, directors, and crew members who share a common love for the arts.</p>\n                <p>We believe in the power of live theater to connect people, inspire emotions, and create lasting memories. Every production we stage is carefully crafted to deliver an exceptional experience for our audience.</p>\n                \"\"\"\n            elif page_name == 'contact':\n                content = \"\"\"\n                <h2 class=\"text-theatrical mb-4\">Contact Us</h2>\n                <p>Get in touch with Grand Stage Productions for booking inquiries, audition information, or general questions about our upcoming performances.</p>\n                <p>We'd love to hear from you and discuss how we can bring our theatrical magic to your venue or event.</p>\n                \"\"\"\n            else:\n                content = f\"<h2 class='text-theatrical mb-4'>{page_name.title()}</h2><p>Content for the {page_name} page.</p>\"\n            \n            page_content = PageContent(\n                page_name=page_name,\n                content=content\n            )\n            db.session.add(page_content)\n        \n    db.session.commit()\n    logging.info(\"Default page content created\")\n","size_bytes":4891},"forms.py":{"content":"from flask_wtf import FlaskForm\nfrom wtforms import StringField, TextAreaField, SelectField, BooleanField, PasswordField, SubmitField, URLField, EmailField, IntegerField\nfrom wtforms.validators import DataRequired, Email, Length, URL, Optional\n\nclass LoginForm(FlaskForm):\n    username = StringField('Username', validators=[DataRequired()])\n    password = PasswordField('Password', validators=[DataRequired()])\n    submit = SubmitField('Sign In')\n\nclass PageContentForm(FlaskForm):\n    page_name = SelectField('Page', choices=[\n        ('home', 'Home'),\n        ('about', 'About'),\n        ('gallery', 'Gallery'),\n        ('contact', 'Contact')\n    ], validators=[DataRequired()])\n    content = TextAreaField('Content', validators=[DataRequired()], render_kw={'rows': 10})\n    meta_title = StringField('Meta Title (SEO)', validators=[Optional(), Length(max=200)])\n    meta_description = TextAreaField('Meta Description (SEO)', validators=[Optional()], render_kw={'rows': 3})\n    submit = SubmitField('Save Content')\n\nclass SiteSettingsForm(FlaskForm):\n    site_title = StringField('Site Title', validators=[DataRequired(), Length(max=100)])\n    site_slogan = StringField('Site Slogan', validators=[DataRequired(), Length(max=200)])\n    logo_url = URLField('Logo URL', validators=[DataRequired(), URL()])\n    contact_email = StringField('Contact Email', validators=[Optional(), Email()])\n    contact_phone = StringField('Contact Phone', validators=[Optional()])\n    contact_address = TextAreaField('Contact Address', validators=[Optional()])\n    instagram_url = URLField('Instagram URL', validators=[Optional(), URL()])\n    facebook_url = URLField('Facebook URL', validators=[Optional(), URL()])\n    twitter_url = URLField('Twitter/X URL', validators=[Optional(), URL()])\n    whatsapp_url = URLField('WhatsApp URL', validators=[Optional(), URL()])\n    meta_description = TextAreaField('Site Meta Description', validators=[Optional()], render_kw={'rows': 3})\n    submit = SubmitField('Save Settings')\n\nclass ImageForm(FlaskForm):\n    title = StringField('Image Title', validators=[DataRequired(), Length(max=200)])\n    image_url = URLField('Image URL', validators=[DataRequired(), URL()])\n    description = TextAreaField('Description', validators=[Optional()], render_kw={'rows': 3})\n    page_name = SelectField('Display On Page', choices=[\n        ('gallery', 'Gallery'),\n        ('home', 'Home'),\n        ('about', 'About'),\n        ('contact', 'Contact')\n    ], validators=[DataRequired()])\n    is_active = BooleanField('Active', default=True)\n    sort_order = StringField('Sort Order (0-999)', validators=[Optional()])\n    submit = SubmitField('Save Image')\n\nclass VideoForm(FlaskForm):\n    title = StringField('Video Title', validators=[DataRequired(), Length(max=200)])\n    video_url = URLField('Video URL', validators=[DataRequired(), URL()])\n    description = TextAreaField('Description', validators=[Optional()], render_kw={'rows': 3})\n    video_type = SelectField('Video Type', choices=[\n        ('youtube', 'YouTube'),\n        ('instagram', 'Instagram')\n    ], validators=[DataRequired()])\n    page_name = SelectField('Display On Page', choices=[\n        ('gallery', 'Gallery'),\n        ('home', 'Home'),\n        ('about', 'About'),\n        ('contact', 'Contact')\n    ], validators=[DataRequired()])\n    is_active = BooleanField('Active', default=True)\n    sort_order = StringField('Sort Order (0-999)', validators=[Optional()])\n    submit = SubmitField('Save Video')\n\nclass ContactForm(FlaskForm):\n    name = StringField('Your Name', validators=[DataRequired()])\n    email = EmailField('Your Email', validators=[DataRequired(), Email()])\n    subject = StringField('Subject', validators=[DataRequired()])\n    message = TextAreaField('Message', validators=[DataRequired()], render_kw={\"rows\": 6})\n    submit = SubmitField('Send Message')\n\nclass EmailCredentialsForm(FlaskForm):\n    email_address = EmailField('Email Address', validators=[DataRequired(), Email()])\n    app_password = PasswordField('App Password', validators=[DataRequired()])\n    smtp_server = StringField('SMTP Server', validators=[DataRequired()], default='smtp.gmail.com')\n    smtp_port = IntegerField('SMTP Port', validators=[DataRequired()], default=587)\n    submit = SubmitField('Save Credentials')\n","size_bytes":4279},"main.py":{"content":"from app import app\nimport routes  # noqa: F401\n\nif __name__ == \"__main__\":\n    app.run(host=\"0.0.0.0\", port=5000, debug=True)\n","size_bytes":127},"models.py":{"content":"from app import db\nfrom flask_login import UserMixin\nfrom datetime import datetime\n\nclass Admin(UserMixin, db.Model):\n    \"\"\"Admin user model for CMS authentication\"\"\"\n    id = db.Column(db.Integer, primary_key=True)\n    username = db.Column(db.String(64), unique=True, nullable=False)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    password_hash = db.Column(db.String(256), nullable=False)\n    created_at = db.Column(db.DateTime, default=datetime.utcnow)\n\nclass SiteSettings(db.Model):\n    \"\"\"Site-wide settings and configuration\"\"\"\n    id = db.Column(db.Integer, primary_key=True)\n    site_title = db.Column(db.String(100), default='Grand Stage Productions')\n    site_slogan = db.Column(db.String(200), default='Bringing Stories to Life')\n    logo_url = db.Column(db.String(500), default='/static/images/default-logo.svg')\n    contact_email = db.Column(db.String(120))\n    contact_phone = db.Column(db.String(50))\n    contact_address = db.Column(db.Text)\n    instagram_url = db.Column(db.String(500))\n    facebook_url = db.Column(db.String(500))\n    twitter_url = db.Column(db.String(500))\n    whatsapp_url = db.Column(db.String(500))\n    meta_description = db.Column(db.Text, default='Grand Stage Productions – Bringing Stories to Life through theatre, creativity, and storytelling.')\n    updated_at = db.Column(db.DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)\n\nclass PageContent(db.Model):\n    \"\"\"Dynamic content for different pages\"\"\"\n    id = db.Column(db.Integer, primary_key=True)\n    page_name = db.Column(db.String(50), unique=True, nullable=False)  # home, about, gallery, contact\n    content = db.Column(db.Text, nullable=False)\n    meta_title = db.Column(db.String(200))\n    meta_description = db.Column(db.Text)\n    updated_at = db.Column(db.DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)\n\nclass Image(db.Model):\n    \"\"\"Image management with descriptions\"\"\"\n    id = db.Column(db.Integer, primary_key=True)\n    title = db.Column(db.String(200), nullable=False)\n    image_url = db.Column(db.String(500), nullable=False)\n    description = db.Column(db.Text)\n    page_name = db.Column(db.String(50))  # Which page to display on (gallery, home, etc.)\n    is_active = db.Column(db.Boolean, default=True)\n    sort_order = db.Column(db.Integer, default=0)\n    created_at = db.Column(db.DateTime, default=datetime.utcnow)\n\nclass Video(db.Model):\n    \"\"\"Video link management for embedded content\"\"\"\n    id = db.Column(db.Integer, primary_key=True)\n    title = db.Column(db.String(200), nullable=False)\n    video_url = db.Column(db.String(500), nullable=False)  # YouTube or Instagram embed URL\n    description = db.Column(db.Text)\n    video_type = db.Column(db.String(20), nullable=False)  # 'youtube' or 'instagram'\n    page_name = db.Column(db.String(50))  # Which page to display on\n    is_active = db.Column(db.Boolean, default=True)\n    sort_order = db.Column(db.Integer, default=0)\n    created_at = db.Column(db.DateTime, default=datetime.utcnow)\n\n    def get_embed_url(self):\n        \"\"\"Convert regular YouTube/Instagram URLs to embed format with improved handling\"\"\"\n        if self.video_type == 'youtube':\n            # Handle regular YouTube URLs\n            if 'watch?v=' in self.video_url:\n                video_id = self.video_url.split('watch?v=')[1].split('&')[0]\n                return f'https://www.youtube.com/embed/{video_id}'\n            # Handle YouTube short URLs\n            elif 'youtu.be/' in self.video_url:\n                video_id = self.video_url.split('youtu.be/')[1].split('?')[0]\n                return f'https://www.youtube.com/embed/{video_id}'\n            # Handle YouTube Shorts\n            elif '/shorts/' in self.video_url:\n                video_id = self.video_url.split('/shorts/')[1].split('?')[0]\n                return f'https://www.youtube.com/embed/{video_id}'\n        elif self.video_type == 'instagram':\n            # Handle Instagram posts and reels\n            if '/p/' in self.video_url or '/reel/' in self.video_url:\n                base_url = self.video_url.rstrip('/')\n                return base_url + '/embed/'\n        return self.video_url\n        \n    def get_embed_html(self):\n        \"\"\"Generate proper embed HTML for videos\"\"\"\n        if self.video_type == 'youtube':\n            video_id = None\n            if 'watch?v=' in self.video_url:\n                video_id = self.video_url.split('watch?v=')[1].split('&')[0]\n            elif 'youtu.be/' in self.video_url:\n                video_id = self.video_url.split('youtu.be/')[1].split('?')[0]\n            elif '/shorts/' in self.video_url:\n                video_id = self.video_url.split('/shorts/')[1].split('?')[0]\n            \n            if video_id:\n                # Check if it's a YouTube Short (different aspect ratio)\n                is_short = '/shorts/' in self.video_url\n                padding = '177.78%' if is_short else '56.25%'\n                \n                return f'''\n                <div style=\"position: relative; padding-bottom: {padding}; height: 0; overflow: hidden;\">\n                  <iframe src=\"https://www.youtube.com/embed/{video_id}\"\n                          style=\"position: absolute; top:0; left:0; width:100%; height:100%;\"\n                          frameborder=\"0\"\n                          allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\"\n                          allowfullscreen>\n                  </iframe>\n                </div>\n                '''\n        elif self.video_type == 'instagram':\n            if '/p/' in self.video_url or '/reel/' in self.video_url:\n                return f'''\n                <blockquote class=\"instagram-media\" data-instgrm-permalink=\"{self.video_url}\" data-instgrm-version=\"14\" style=\"width:100%; max-width:540px; margin:auto;\">\n                </blockquote>\n                <script async src=\"//www.instagram.com/embed.js\"></script>\n                '''\n        \n        return f'<p>Unable to embed video: <a href=\"{self.video_url}\" target=\"_blank\">{self.video_url}</a></p>'\n\n# Email System Credentials\nclass EmailCredentials(db.Model):\n    \"\"\"Email system credentials for sending automated emails\"\"\"\n    __tablename__ = 'email_credentials'\n    \n    id = db.Column(db.Integer, primary_key=True)\n    email_address = db.Column(db.String(150), nullable=False)\n    app_password = db.Column(db.String(200), nullable=False)\n    smtp_server = db.Column(db.String(100), default='smtp.gmail.com')\n    smtp_port = db.Column(db.Integer, default=587)\n    created_at = db.Column(db.DateTime, default=datetime.utcnow)\n    updated_at = db.Column(db.DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)\n    \n    def __repr__(self):\n        return f'<EmailCredentials {self.email_address}>'\n\n# Contact Form Submissions\nclass ContactSubmission(db.Model):\n    \"\"\"Contact form submissions from the website\"\"\"\n    __tablename__ = 'contact_submissions'\n    \n    id = db.Column(db.Integer, primary_key=True)\n    name = db.Column(db.String(100), nullable=False)\n    email = db.Column(db.String(150), nullable=False)\n    subject = db.Column(db.String(200), nullable=False)\n    message = db.Column(db.Text, nullable=False)\n    submitted_at = db.Column(db.DateTime, default=datetime.utcnow)\n    is_read = db.Column(db.Boolean, default=False)\n    \n    def __repr__(self):\n        return f'<ContactSubmission {self.name} - {self.subject}>'\n","size_bytes":7431},"pyproject.toml":{"content":"[project]\nname = \"repl-nix-workspace\"\nversion = \"0.1.0\"\ndescription = \"Add your description here\"\nrequires-python = \">=3.11\"\ndependencies = [\n    \"email-validator>=2.2.0\",\n    \"flask-dance>=7.1.0\",\n    \"flask>=3.1.1\",\n    \"flask-sqlalchemy>=3.1.1\",\n    \"gunicorn>=23.0.0\",\n    \"psycopg2-binary>=2.9.10\",\n    \"pyjwt>=2.10.1\",\n    \"flask-login>=0.6.3\",\n    \"oauthlib>=3.3.1\",\n    \"flask-wtf>=1.2.2\",\n    \"wtforms>=3.2.1\",\n    \"sqlalchemy>=2.0.42\",\n    \"werkzeug>=3.1.3\",\n    \"sendgrid>=6.12.4\",\n]\n","size_bytes":495},"replit.md":{"content":"# Grand Stage Productions CMS\n\n## Overview\n\nThis is a custom Content Management System (CMS) built for Grand Stage Productions, a theatrical group. The website features a deep maroon theatrical theme with vintage stage production aesthetics. It includes both a public-facing website showcasing productions and performances, and a secure admin panel for managing all dynamic content.\n\nThe system supports dynamic page content management, image galleries, embedded video content, social media integration, and comprehensive SEO optimization. All content is database-driven with no hardcoded HTML, allowing administrators to fully customize the site through the web interface.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n- **Template Engine**: Jinja2 templating with Flask\n- **Base Template System**: Extends from `base.html` for consistent layout across all pages\n- **Responsive Design**: Bootstrap 5 for mobile-first responsive layout\n- **Theme System**: CSS custom properties for consistent theatrical styling with deep maroon (#722F37) primary colors\n- **Typography**: Google Fonts integration (Cinzel, Playfair Display, Crimson Text) for theatrical feel\n- **Component Structure**: Modular template components for images, videos, and content sections\n\n### Backend Architecture\n- **Web Framework**: Flask with SQLAlchemy ORM\n- **Database Models**: \n  - Admin (user authentication)\n  - SiteSettings (global site configuration)\n  - PageContent (dynamic page content with SEO metadata)\n  - Image (image management with descriptions and page associations)\n  - Video (embedded video links with platform support)\n- **Authentication**: Flask-Login for session management with secure admin panel access\n- **Form Handling**: WTForms for form validation and CSRF protection\n- **Content Management**: Full CRUD operations for all content types through admin interface\n\n### Data Storage Solutions\n- **Primary Database**: SQLAlchemy with PostgreSQL support (configurable via DATABASE_URL)\n- **Connection Management**: Pool recycling and pre-ping for reliability\n- **Model Relationships**: Organized content by page associations and active status\n- **SEO Integration**: Built-in meta title and description fields for all pages\n\n### Authentication and Authorization\n- **Admin Authentication**: Username/password login system with password hashing\n- **Session Management**: Flask-Login with secure session handling\n- **Access Control**: Login required decorators for all admin routes\n- **User Model**: Single admin user model with UserMixin integration\n\n### Content Management Features\n- **Dynamic Content**: All page content stored in database with HTML support\n- **Image Management**: URL-based image system with titles, descriptions, and page associations\n- **Video Integration**: Support for YouTube and Instagram embedded videos\n- **Social Media**: Configurable social media links (Instagram, Facebook, Twitter, WhatsApp)\n- **SEO Optimization**: Meta tags, Open Graph, and Twitter Card support on all pages\n\n## External Dependencies\n\n### Core Framework Dependencies\n- **Flask**: Web application framework\n- **SQLAlchemy**: Database ORM and connection management\n- **Flask-Login**: User session and authentication management\n- **WTForms**: Form handling and validation\n- **Werkzeug**: WSGI utilities and password hashing\n\n### Frontend Dependencies\n- **Bootstrap 5**: CSS framework and responsive components\n- **Font Awesome**: Icon library for UI elements\n- **Google Fonts**: Typography (Cinzel, Playfair Display, Crimson Text families)\n\n### Production Dependencies\n- **ProxyFix**: WSGI middleware for reverse proxy deployment\n- **Environment Variables**: \n  - `DATABASE_URL`: PostgreSQL connection string\n  - `SESSION_SECRET`: Flask session encryption key\n\n### Deployment Platform\n- **Render**: Cloud platform deployment target\n- **PostgreSQL**: Production database service\n- **Static Assets**: CDN-served Bootstrap, Font Awesome, and Google Fonts\n\n### Video Platform Integrations\n- **YouTube**: Embedded video support with iframe integration\n- **Instagram**: Video embed support for social media content","size_bytes":4180},"routes.py":{"content":"from flask import render_template, request, redirect, url_for, flash, jsonify\nfrom flask_login import login_user, login_required, logout_user, current_user\nfrom werkzeug.security import check_password_hash, generate_password_hash\nfrom app import app, db\nfrom models import Admin, SiteSettings, PageContent, Image, Video, EmailCredentials, ContactSubmission\nfrom forms import LoginForm, PageContentForm, SiteSettingsForm, ImageForm, VideoForm, ContactForm, EmailCredentialsForm\nfrom email_utils import send_contact_notification\n\ndef get_site_settings():\n    \"\"\"Helper function to get site settings\"\"\"\n    return SiteSettings.query.first() or SiteSettings()\n\ndef get_page_content(page_name):\n    \"\"\"Helper function to get page content\"\"\"\n    content = PageContent.query.filter_by(page_name=page_name).first()\n    return content.content if content else f\"<h2>Welcome to {page_name.title()}</h2>\"\n\ndef get_page_images(page_name):\n    \"\"\"Helper function to get images for a page\"\"\"\n    return Image.query.filter_by(page_name=page_name, is_active=True).order_by(Image.sort_order).all()\n\ndef get_page_videos(page_name):\n    \"\"\"Helper function to get videos for a page\"\"\"\n    return Video.query.filter_by(page_name=page_name, is_active=True).order_by(Video.sort_order).all()\n\n# Public Routes\n@app.route('/')\ndef index():\n    settings = get_site_settings()\n    content = get_page_content('home')\n    images = get_page_images('home')\n    videos = get_page_videos('home')\n    \n    return render_template('index.html', \n                         settings=settings, \n                         content=content,\n                         images=images,\n                         videos=videos,\n                         page_name='home')\n\n@app.route('/about')\ndef about():\n    settings = get_site_settings()\n    content = get_page_content('about')\n    images = get_page_images('about')\n    videos = get_page_videos('about')\n    \n    return render_template('about.html', \n                         settings=settings, \n                         content=content,\n                         images=images,\n                         videos=videos,\n                         page_name='about')\n\n@app.route('/gallery')\ndef gallery():\n    settings = get_site_settings()\n    content = get_page_content('gallery')\n    images = get_page_images('gallery')\n    videos = get_page_videos('gallery')\n    \n    return render_template('gallery.html', \n                         settings=settings, \n                         content=content,\n                         images=images,\n                         videos=videos,\n                         page_name='gallery')\n\n@app.route('/contact', methods=['GET', 'POST'])\ndef contact():\n    settings = get_site_settings()\n    content = get_page_content('contact')\n    images = get_page_images('contact')\n    videos = get_page_videos('contact')\n    form = ContactForm()\n    \n    if form.validate_on_submit():\n        # Create contact submission\n        submission = ContactSubmission(\n            name=form.name.data,\n            email=form.email.data,\n            subject=form.subject.data,\n            message=form.message.data\n        )\n        \n        try:\n            # Save to database\n            db.session.add(submission)\n            db.session.commit()\n            \n            # Send email notifications\n            success, message = send_contact_notification(submission)\n            if success:\n                flash('Thank you for your message! We\\'ll get back to you soon.', 'success')\n            else:\n                flash('Your message was saved but email notifications failed to send.', 'warning')\n                \n        except Exception as e:\n            db.session.rollback()\n            flash('There was an error sending your message. Please try again.', 'error')\n            \n        return redirect(url_for('contact'))\n    \n    return render_template('contact.html', \n                         settings=settings, \n                         content=content,\n                         images=images,\n                         videos=videos,\n                         form=form,\n                         page_name='contact')\n\n# Admin Routes\n@app.route('/admin/login', methods=['GET', 'POST'])\ndef admin_login():\n    if current_user.is_authenticated:\n        return redirect(url_for('admin_dashboard'))\n        \n    form = LoginForm()\n    if form.validate_on_submit():\n        admin = Admin.query.filter_by(username=form.username.data).first()\n        if admin and check_password_hash(admin.password_hash, form.password.data):\n            login_user(admin)\n            next_page = request.args.get('next')\n            return redirect(next_page) if next_page else redirect(url_for('admin_dashboard'))\n        flash('Invalid username or password', 'danger')\n    \n    return render_template('admin/login.html', form=form)\n\n@app.route('/admin/logout')\n@login_required\ndef admin_logout():\n    logout_user()\n    flash('You have been logged out.', 'info')\n    return redirect(url_for('index'))\n\n@app.route('/admin')\n@app.route('/admin/dashboard')\n@login_required\ndef admin_dashboard():\n    settings = get_site_settings()\n    total_images = Image.query.count()\n    total_videos = Video.query.count()\n    total_pages = PageContent.query.count()\n    \n    return render_template('admin/dashboard.html',\n                         settings=settings,\n                         total_images=total_images,\n                         total_videos=total_videos,\n                         total_pages=total_pages)\n\n@app.route('/admin/content', methods=['GET', 'POST'])\n@app.route('/admin/content/<page_name>', methods=['GET', 'POST'])\n@login_required\ndef admin_content(page_name=None):\n    form = PageContentForm()\n    \n    if page_name:\n        form.page_name.data = page_name\n    \n    if form.validate_on_submit():\n        content = PageContent.query.filter_by(page_name=form.page_name.data).first()\n        if not content:\n            content = PageContent(page_name=form.page_name.data)\n        \n        content.content = form.content.data\n        content.meta_title = form.meta_title.data\n        content.meta_description = form.meta_description.data\n        \n        db.session.add(content)\n        db.session.commit()\n        flash(f'Content for {form.page_name.data} page updated successfully!', 'success')\n        return redirect(url_for('admin_content', page_name=form.page_name.data))\n    \n    # Load existing content if editing\n    if page_name:\n        content = PageContent.query.filter_by(page_name=page_name).first()\n        if content:\n            form.page_name.data = content.page_name\n            form.content.data = content.content\n            form.meta_title.data = content.meta_title\n            form.meta_description.data = content.meta_description\n    \n    return render_template('admin/edit_content.html', form=form, page_name=page_name)\n\n@app.route('/admin/images')\n@login_required\ndef admin_images():\n    page = request.args.get('page', 1, type=int)\n    images = Image.query.order_by(Image.page_name, Image.sort_order).paginate(\n        page=page, per_page=10, error_out=False)\n    return render_template('admin/manage_images.html', images=images)\n\n@app.route('/admin/images/add', methods=['GET', 'POST'])\n@app.route('/admin/images/edit/<int:image_id>', methods=['GET', 'POST'])\n@login_required\ndef admin_image_form(image_id=None):\n    if image_id:\n        image = Image.query.get_or_404(image_id)\n        form = ImageForm(obj=image)\n        form.sort_order.data = str(image.sort_order)\n    else:\n        image = None\n        form = ImageForm()\n    \n    if form.validate_on_submit():\n        if not image:\n            image = Image()\n        \n        image.title = form.title.data\n        image.image_url = form.image_url.data\n        image.description = form.description.data\n        image.page_name = form.page_name.data\n        image.is_active = form.is_active.data\n        image.sort_order = int(form.sort_order.data) if form.sort_order.data else 0\n        \n        db.session.add(image)\n        db.session.commit()\n        \n        flash('Image saved successfully!', 'success')\n        return redirect(url_for('admin_images'))\n    \n    return render_template('admin/manage_images.html', form=form, image=image)\n\n@app.route('/admin/images/delete/<int:image_id>', methods=['POST'])\n@login_required\ndef admin_delete_image(image_id):\n    image = Image.query.get_or_404(image_id)\n    db.session.delete(image)\n    db.session.commit()\n    flash('Image deleted successfully!', 'success')\n    return redirect(url_for('admin_images'))\n\n@app.route('/admin/videos')\n@login_required\ndef admin_videos():\n    page = request.args.get('page', 1, type=int)\n    videos = Video.query.order_by(Video.page_name, Video.sort_order).paginate(\n        page=page, per_page=10, error_out=False)\n    return render_template('admin/manage_videos.html', videos=videos)\n\n@app.route('/admin/videos/add', methods=['GET', 'POST'])\n@app.route('/admin/videos/edit/<int:video_id>', methods=['GET', 'POST'])\n@login_required\ndef admin_video_form(video_id=None):\n    if video_id:\n        video = Video.query.get_or_404(video_id)\n        form = VideoForm(obj=video)\n        form.sort_order.data = str(video.sort_order)\n    else:\n        video = None\n        form = VideoForm()\n    \n    if form.validate_on_submit():\n        if not video:\n            video = Video()\n        \n        video.title = form.title.data\n        video.video_url = form.video_url.data\n        video.description = form.description.data\n        video.video_type = form.video_type.data\n        video.page_name = form.page_name.data\n        video.is_active = form.is_active.data\n        video.sort_order = int(form.sort_order.data) if form.sort_order.data else 0\n        \n        db.session.add(video)\n        db.session.commit()\n        \n        flash('Video saved successfully!', 'success')\n        return redirect(url_for('admin_videos'))\n    \n    return render_template('admin/manage_videos.html', form=form, video=video)\n\n@app.route('/admin/videos/delete/<int:video_id>', methods=['POST'])\n@login_required\ndef admin_delete_video(video_id):\n    video = Video.query.get_or_404(video_id)\n    db.session.delete(video)\n    db.session.commit()\n    flash('Video deleted successfully!', 'success')\n    return redirect(url_for('admin_videos'))\n\n@app.route('/admin/settings', methods=['GET', 'POST'])\n@login_required\ndef admin_settings():\n    settings = SiteSettings.query.first()\n    if not settings:\n        settings = SiteSettings()\n        db.session.add(settings)\n        db.session.commit()\n    \n    form = SiteSettingsForm(obj=settings)\n    \n    if form.validate_on_submit():\n        form.populate_obj(settings)\n        db.session.commit()\n        flash('Settings updated successfully!', 'success')\n        return redirect(url_for('admin_settings'))\n    \n    return render_template('admin/settings.html', form=form, settings=settings)\n\n# System Credentials Management\n@app.route('/admin/system-credentials', methods=['GET', 'POST'])\n@login_required\ndef admin_system_credentials():\n    \"\"\"System credentials management page\"\"\"\n    credentials = EmailCredentials.query.first()\n    form = EmailCredentialsForm(obj=credentials)\n    \n    if form.validate_on_submit():\n        if credentials:\n            # Update existing credentials\n            credentials.email_address = form.email_address.data\n            credentials.app_password = form.app_password.data\n            credentials.smtp_server = form.smtp_server.data\n            credentials.smtp_port = form.smtp_port.data\n        else:\n            # Create new credentials\n            credentials = EmailCredentials(\n                email_address=form.email_address.data,\n                app_password=form.app_password.data,\n                smtp_server=form.smtp_server.data,\n                smtp_port=form.smtp_port.data\n            )\n            db.session.add(credentials)\n        \n        try:\n            db.session.commit()\n            flash('Email credentials saved successfully!', 'success')\n        except Exception as e:\n            db.session.rollback()\n            flash('Error saving credentials. Please try again.', 'error')\n        \n        return redirect(url_for('admin_system_credentials'))\n    \n    # Get contact submissions\n    submissions = ContactSubmission.query.order_by(ContactSubmission.submitted_at.desc()).limit(10).all()\n    \n    return render_template('admin/system_credentials.html', \n                         form=form, \n                         credentials=credentials,\n                         submissions=submissions)\n\n# Contact Submissions Management\n@app.route('/admin/contact-submissions')\n@login_required\ndef admin_contact_submissions():\n    \"\"\"View all contact form submissions\"\"\"\n    submissions = ContactSubmission.query.order_by(ContactSubmission.submitted_at.desc()).all()\n    return render_template('admin/contact_submissions.html', submissions=submissions)\n\n@app.route('/admin/contact-submissions/<int:submission_id>/mark-read')\n@login_required\ndef mark_submission_read(submission_id):\n    \"\"\"Mark a contact submission as read\"\"\"\n    submission = ContactSubmission.query.get_or_404(submission_id)\n    submission.is_read = True\n    \n    try:\n        db.session.commit()\n        flash('Submission marked as read.', 'success')\n    except Exception as e:\n        db.session.rollback()\n        flash('Error updating submission.', 'error')\n    \n    return redirect(url_for('admin_contact_submissions'))\n\n# Context processor to make settings available in all templates\n@app.context_processor\ndef inject_settings():\n    return {'site_settings': get_site_settings()}\n","size_bytes":13606},"static/css/style.css":{"content":"/* Grand Stage Productions - Theatrical Theme */\n\n/* Import additional fonts for theatrical feel */\n@import url('https://fonts.googleapis.com/css2?family=Cinzel+Decorative:wght@400;700;900&family=Playfair+Display:ital,wght@0,400;0,500;0,600;0,700;1,400;1,500&display=swap');\n\n/* CSS Custom Properties for Theatrical Theme */\n:root {\n    --theatrical-primary: #722F37;      /* Deep maroon */\n    --theatrical-secondary: #8B1538;    /* Rich burgundy */\n    --theatrical-accent: #D4AF37;       /* Gold accent */\n    --theatrical-dark: #2D1B1E;         /* Dark maroon */\n    --theatrical-light: #F5F3F0;        /* Warm cream */\n    --theatrical-muted: #A67C8A;        /* Muted rose */\n    --theatrical-shadow: rgba(114, 47, 55, 0.3);\n    \n    /* Typography */\n    --font-theatrical: 'Cinzel', serif;\n    --font-decorative: 'Cinzel Decorative', serif;\n    --font-elegant: 'Playfair Display', serif;\n    --font-body: 'Crimson Text', serif;\n}\n\n/* Base Styles */\n* {\n    box-sizing: border-box;\n}\n\nbody {\n    font-family: var(--font-body);\n    background: linear-gradient(135deg, var(--theatrical-light) 0%, #F0EDE8 100%);\n    color: var(--theatrical-dark);\n    line-height: 1.6;\n    min-height: 100vh;\n}\n\n/* Theatrical Background Pattern */\nbody::before {\n    content: '';\n    position: fixed;\n    top: 0;\n    left: 0;\n    right: 0;\n    bottom: 0;\n    background-image: \n        radial-gradient(circle at 25% 25%, rgba(114, 47, 55, 0.05) 0%, transparent 50%),\n        radial-gradient(circle at 75% 75%, rgba(139, 21, 56, 0.05) 0%, transparent 50%);\n    z-index: -2;\n    pointer-events: none;\n}\n\n/* Theatrical Typography */\n.text-theatrical {\n    color: var(--theatrical-primary) !important;\n    font-family: var(--font-theatrical);\n    font-weight: 600;\n}\n\n.site-title {\n    font-family: var(--font-decorative);\n    font-size: 2.2rem;\n    color: var(--theatrical-primary);\n    text-shadow: 2px 2px 4px var(--theatrical-shadow);\n    font-weight: 700;\n}\n\n.slogan {\n    font-family: var(--font-elegant);\n    font-style: italic;\n    color: var(--theatrical-secondary);\n    font-size: 0.95rem;\n    margin: 0;\n    text-align: center;\n    font-weight: 400;\n    line-height: 1.2;\n}\n\n/* Header Styling */\n.theatrical-header {\n    background: linear-gradient(135deg, var(--theatrical-primary) 0%, var(--theatrical-secondary) 100%);\n    color: white;\n    box-shadow: 0 4px 20px var(--theatrical-shadow);\n    position: relative;\n    overflow: hidden;\n}\n\n.theatrical-header::before {\n    content: '';\n    position: absolute;\n    top: 0;\n    left: 0;\n    right: 0;\n    bottom: 0;\n    background: url(\"data:image/svg+xml,%3Csvg width='40' height='40' viewBox='0 0 40 40' xmlns='http://www.w3.org/2000/svg'%3E%3Cg fill='rgba(255,255,255,0.1)'%3E%3Cpath d='M20 20c0 11.046-8.954 20-20 20v20h40V20H20z'/%3E%3C/g%3E%3C/svg%3E\") repeat;\n    z-index: 0;\n    pointer-events: none;\n}\n\n.theatrical-header .container {\n    position: relative;\n    z-index: 1;\n}\n\n.theatrical-header .site-title {\n    color: white;\n    text-shadow: 3px 3px 6px rgba(0, 0, 0, 0.5);\n}\n\n.theatrical-header .slogan {\n    color: var(--theatrical-accent);\n    text-shadow: 1px 1px 3px rgba(0, 0, 0, 0.3);\n}\n\n/* Logo Styling */\n.logo {\n    max-width: 60px;\n    max-height: 60px;\n    filter: drop-shadow(2px 2px 4px rgba(0, 0, 0, 0.3));\n    transition: transform 0.3s ease;\n}\n\n.logo:hover {\n    transform: scale(1.1);\n}\n\n/* Navigation Styling */\n.navbar {\n    padding: 0;\n}\n\n.navbar-nav {\n    gap: 1rem;\n}\n\n.nav-link {\n    color: rgba(255, 255, 255, 0.9) !important;\n    font-family: var(--font-theatrical);\n    font-size: 1.1rem;\n    font-weight: 500;\n    padding: 0.5rem 1rem !important;\n    border-radius: 8px;\n    transition: all 0.3s ease;\n    position: relative;\n    text-transform: uppercase;\n    letter-spacing: 1px;\n}\n\n.nav-link::before {\n    content: '';\n    position: absolute;\n    bottom: 0;\n    left: 50%;\n    width: 0;\n    height: 2px;\n    background: var(--theatrical-accent);\n    transition: all 0.3s ease;\n    transform: translateX(-50%);\n}\n\n.nav-link:hover,\n.nav-link.active {\n    color: var(--theatrical-accent) !important;\n    background: rgba(255, 255, 255, 0.1);\n    transform: translateY(-2px);\n}\n\n.nav-link:hover::before,\n.nav-link.active::before {\n    width: 80%;\n}\n\n.navbar-toggler {\n    border: 2px solid rgba(255, 255, 255, 0.3);\n    color: white;\n}\n\n.navbar-toggler-icon {\n    background-image: url(\"data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 30 30'%3e%3cpath stroke='rgba%28255, 255, 255, 0.8%29' stroke-linecap='round' stroke-miterlimit='10' stroke-width='2' d='M4 7h22M4 15h22M4 23h22'/%3e%3c/svg%3e\");\n}\n\n/* Button Styles */\n.btn-theatrical {\n    background: linear-gradient(135deg, var(--theatrical-primary) 0%, var(--theatrical-secondary) 100%);\n    border: none;\n    color: white;\n    font-family: var(--font-theatrical);\n    font-weight: 500;\n    padding: 0.75rem 2rem;\n    border-radius: 50px;\n    text-transform: uppercase;\n    letter-spacing: 1px;\n    transition: all 0.3s ease;\n    box-shadow: 0 4px 15px var(--theatrical-shadow);\n    position: relative;\n    overflow: hidden;\n}\n\n/* Golden Contact Button */\n.btn-golden {\n    background: linear-gradient(135deg, #FFD700 0%, #FFA500 100%);\n    border: none;\n    color: #722F37;\n    font-family: var(--font-theatrical);\n    font-weight: 600;\n    padding: 0.75rem 2rem;\n    border-radius: 50px;\n    text-transform: uppercase;\n    letter-spacing: 1px;\n    transition: all 0.3s ease;\n    box-shadow: 0 4px 15px rgba(255, 215, 0, 0.3);\n    position: relative;\n    overflow: hidden;\n}\n\n.btn-golden:hover {\n    background: linear-gradient(135deg, #FFA500 0%, #FFD700 100%);\n    color: #722F37;\n    transform: translateY(-3px);\n    box-shadow: 0 8px 25px rgba(255, 215, 0, 0.4);\n}\n\n.btn-theatrical::before {\n    content: '';\n    position: absolute;\n    top: 0;\n    left: -100%;\n    width: 100%;\n    height: 100%;\n    background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.2), transparent);\n    transition: left 0.5s ease;\n}\n\n.btn-theatrical:hover {\n    transform: translateY(-3px);\n    box-shadow: 0 8px 25px var(--theatrical-shadow);\n    color: white;\n    background: linear-gradient(135deg, var(--theatrical-secondary) 0%, var(--theatrical-primary) 100%);\n}\n\n.btn-theatrical:hover::before {\n    left: 100%;\n}\n\n.btn-outline-theatrical {\n    border: 2px solid var(--theatrical-primary);\n    color: var(--theatrical-primary);\n    background: transparent;\n    font-family: var(--font-theatrical);\n    font-weight: 500;\n    padding: 0.75rem 2rem;\n    border-radius: 50px;\n    text-transform: uppercase;\n    letter-spacing: 1px;\n    transition: all 0.3s ease;\n}\n\n.btn-outline-theatrical:hover {\n    background: var(--theatrical-primary);\n    color: white;\n    transform: translateY(-3px);\n    box-shadow: 0 8px 25px var(--theatrical-shadow);\n}\n\n/* Card Styles */\n.card,\n.management-card,\n.content-editor-card,\n.image-form-card,\n.video-form-card,\n.settings-form-card,\n.images-list-card,\n.videos-list-card,\n.contact-info-card {\n    background: white;\n    border: none;\n    border-radius: 15px;\n    box-shadow: 0 8px 30px rgba(114, 47, 55, 0.1);\n    transition: transform 0.3s ease, box-shadow 0.3s ease;\n    position: relative;\n    overflow: hidden;\n}\n\n.card::before,\n.management-card::before {\n    content: '';\n    position: absolute;\n    top: 0;\n    left: 0;\n    right: 0;\n    height: 4px;\n    background: linear-gradient(90deg, var(--theatrical-primary), var(--theatrical-accent), var(--theatrical-secondary));\n}\n\n.card:hover,\n.management-card:hover {\n    transform: translateY(-5px);\n    box-shadow: 0 15px 40px rgba(114, 47, 55, 0.15);\n}\n\n/* Stat Cards */\n.stat-card {\n    background: linear-gradient(135deg, white 0%, #fafafa 100%);\n    border: none;\n    border-radius: 15px;\n    box-shadow: 0 8px 30px rgba(114, 47, 55, 0.1);\n    transition: all 0.3s ease;\n    display: flex;\n    align-items: center;\n    gap: 1rem;\n    position: relative;\n    overflow: hidden;\n}\n\n.stat-card::before {\n    content: '';\n    position: absolute;\n    top: 0;\n    left: 0;\n    width: 4px;\n    height: 100%;\n    background: linear-gradient(180deg, var(--theatrical-primary), var(--theatrical-secondary));\n}\n\n.stat-card:hover {\n    transform: translateY(-3px) scale(1.02);\n    box-shadow: 0 12px 35px rgba(114, 47, 55, 0.15);\n}\n\n.stat-icon {\n    min-width: 60px;\n    text-align: center;\n}\n\n.stat-info h4 {\n    font-family: var(--font-theatrical);\n    color: var(--theatrical-primary);\n    margin: 0;\n    font-size: 2rem;\n}\n\n.stat-info p {\n    color: var(--theatrical-muted);\n    margin: 0;\n    font-weight: 500;\n}\n\n/* Footer Styling */\n.theatrical-footer {\n    background: linear-gradient(135deg, var(--theatrical-dark) 0%, var(--theatrical-primary) 100%);\n    color: white;\n    position: relative;\n    overflow: hidden;\n}\n\n.theatrical-footer::before {\n    content: '';\n    position: absolute;\n    top: 0;\n    left: 0;\n    right: 0;\n    bottom: 0;\n    background: url(\"data:image/svg+xml,%3Csvg width='60' height='60' viewBox='0 0 60 60' xmlns='http://www.w3.org/2000/svg'%3E%3Cg fill='none' fill-rule='evenodd'%3E%3Cg fill='rgba(255,255,255,0.05)' fill-opacity='1'%3E%3Ccircle cx='30' cy='30' r='4'/%3E%3C/g%3E%3C/g%3E%3C/svg%3E\") repeat;\n    z-index: 0;\n}\n\n.theatrical-footer .container {\n    position: relative;\n    z-index: 1;\n}\n\n.theatrical-footer h5 {\n    font-family: var(--font-theatrical);\n    color: var(--theatrical-accent);\n}\n\n/* Social Icons */\n.social-icons a {\n    color: rgba(255, 255, 255, 0.8);\n    transition: all 0.3s ease;\n    display: inline-block;\n}\n\n.social-icons a:hover {\n    color: var(--theatrical-accent);\n    transform: translateY(-3px) scale(1.2);\n}\n\n.social-link {\n    display: inline-flex;\n    flex-direction: column;\n    align-items: center;\n    color: var(--theatrical-primary);\n    text-decoration: none;\n    transition: all 0.3s ease;\n}\n\n.social-link:hover {\n    color: var(--theatrical-secondary);\n    transform: translateY(-2px);\n}\n\n.social-link span {\n    font-size: 0.8rem;\n    margin-top: 0.5rem;\n    font-weight: 500;\n}\n\n/* Video Embed Container */\n.video-embed-container {\n    position: relative;\n    padding-bottom: 56.25%; /* 16:9 aspect ratio */\n    height: 0;\n    overflow: hidden;\n    border-radius: 10px;\n    box-shadow: 0 4px 20px rgba(114, 47, 55, 0.2);\n}\n\n.video-embed-container iframe {\n    position: absolute;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    border: none;\n}\n\n.video-card,\n.image-card {\n    transition: all 0.3s ease;\n}\n\n.video-card:hover,\n.image-card:hover {\n    transform: translateY(-5px);\n}\n\n.video-title,\n.image-title {\n    font-family: var(--font-theatrical);\n    color: var(--theatrical-primary);\n    font-size: 1.1rem;\n    margin-bottom: 0.5rem;\n}\n\n.video-description,\n.image-description {\n    color: var(--theatrical-muted);\n    font-size: 0.9rem;\n    line-height: 1.5;\n}\n\n/* Hero Section */\n.hero-section {\n    background: linear-gradient(135deg, rgba(114, 47, 55, 0.1) 0%, rgba(139, 21, 56, 0.1) 100%);\n    border-radius: 15px;\n    position: relative;\n    overflow: hidden;\n}\n\n.hero-section::before {\n    content: '';\n    position: absolute;\n    top: 0;\n    left: 0;\n    right: 0;\n    bottom: 0;\n    background: url(\"data:image/svg+xml,%3Csvg width='100' height='100' viewBox='0 0 100 100' xmlns='http://www.w3.org/2000/svg'%3E%3Cg fill-rule='evenodd'%3E%3Cg fill='rgba(114,47,55,0.05)'%3E%3Cpath d='M50 50c13.807 0 25-11.193 25-25S63.807 0 50 0 25 11.193 25 25s11.193 25 25 25zm25 25c13.807 0 25-11.193 25-25S88.807 50 75 50 50 61.193 50 75s11.193 25 25 25zM0 75c13.807 0 25-11.193 25-25S13.807 25 0 25v50zM0 25c13.807 0 25-11.193 25-25H0v25z'/%3E%3C/g%3E%3C/g%3E%3C/svg%3E\") repeat;\n    z-index: 0;\n    opacity: 0.3;\n}\n\n.hero-section .container,\n.hero-section > * {\n    position: relative;\n    z-index: 1;\n}\n\n/* CTA Section */\n.cta-section {\n    background: linear-gradient(135deg, var(--theatrical-primary) 0%, var(--theatrical-secondary) 100%);\n    color: white;\n    border-radius: 15px;\n    position: relative;\n    overflow: hidden;\n}\n\n.cta-section::before {\n    content: '';\n    position: absolute;\n    top: 0;\n    left: 0;\n    right: 0;\n    bottom: 0;\n    background: radial-gradient(circle at 50% 50%, rgba(255, 255, 255, 0.1) 0%, transparent 70%);\n    z-index: 0;\n}\n\n.cta-background {\n    position: relative;\n    z-index: 1;\n}\n\n.cta-buttons .btn {\n    margin: 0.5rem;\n}\n\n/* Admin Login */\n.admin-login-body {\n    background: linear-gradient(135deg, var(--theatrical-primary) 0%, var(--theatrical-secondary) 100%);\n    min-height: 100vh;\n}\n\n.admin-login-card {\n    background: white;\n    border: none;\n    box-shadow: 0 15px 50px rgba(0, 0, 0, 0.3);\n}\n\n/* Form Styling */\n.form-control {\n    border: 2px solid #e9ecef;\n    border-radius: 10px;\n    padding: 0.75rem 1rem;\n    font-family: var(--font-body);\n    transition: all 0.3s ease;\n}\n\n.form-control:focus {\n    border-color: var(--theatrical-primary);\n    box-shadow: 0 0 0 0.2rem rgba(114, 47, 55, 0.25);\n}\n\n.form-label {\n    font-family: var(--font-theatrical);\n    font-weight: 500;\n    color: var(--theatrical-primary);\n    margin-bottom: 0.5rem;\n}\n\n.form-select {\n    border: 2px solid #e9ecef;\n    border-radius: 10px;\n    padding: 0.75rem 1rem;\n    font-family: var(--font-body);\n    transition: all 0.3s ease;\n}\n\n.form-select:focus {\n    border-color: var(--theatrical-primary);\n    box-shadow: 0 0 0 0.2rem rgba(114, 47, 55, 0.25);\n}\n\n/* Table Styling */\n.table {\n    border-radius: 10px;\n    overflow: hidden;\n    box-shadow: 0 4px 15px rgba(114, 47, 55, 0.1);\n}\n\n.table th {\n    background: var(--theatrical-primary);\n    color: white;\n    font-family: var(--font-theatrical);\n    font-weight: 500;\n    border: none;\n    padding: 1rem;\n}\n\n.table td {\n    padding: 1rem;\n    vertical-align: middle;\n    border-color: rgba(114, 47, 55, 0.1);\n}\n\n.table-striped tbody tr:nth-of-type(odd) {\n    background-color: rgba(114, 47, 55, 0.05);\n}\n\n/* Badge Styling */\n.badge {\n    font-family: var(--font-theatrical);\n    font-weight: 500;\n    letter-spacing: 0.5px;\n}\n\n.bg-secondary {\n    background-color: var(--theatrical-muted) !important;\n}\n\n.bg-success {\n    background-color: #28a745 !important;\n}\n\n.bg-warning {\n    background-color: var(--theatrical-accent) !important;\n    color: var(--theatrical-dark) !important;\n}\n\n.bg-info {\n    background-color: #17a2b8 !important;\n}\n\n/* Modal Styling */\n.modal-content {\n    border: none;\n    border-radius: 15px;\n    box-shadow: 0 15px 50px rgba(0, 0, 0, 0.3);\n}\n\n.modal-header {\n    background: linear-gradient(135deg, var(--theatrical-primary) 0%, var(--theatrical-secondary) 100%);\n    color: white;\n    border-bottom: none;\n    border-radius: 15px 15px 0 0;\n}\n\n.modal-title {\n    font-family: var(--font-theatrical);\n}\n\n/* Contact Page Styling */\n.contact-item {\n    display: flex;\n    align-items: flex-start;\n    gap: 1rem;\n}\n\n.contact-details strong {\n    font-family: var(--font-theatrical);\n    color: var(--theatrical-primary);\n}\n\n.contact-details a {\n    color: var(--theatrical-secondary);\n    text-decoration: none;\n}\n\n.contact-details a:hover {\n    text-decoration: underline;\n}\n\n/* Gallery Styling */\n.gallery-image {\n    transition: all 0.3s ease;\n    border-radius: 10px;\n}\n\n.gallery-image:hover {\n    transform: scale(1.05);\n    box-shadow: 0 8px 25px rgba(114, 47, 55, 0.3);\n}\n\n/* Empty States */\n.empty-state,\n.empty-gallery,\n.contact-placeholder,\n.preview-placeholder {\n    background: rgba(114, 47, 55, 0.05);\n    border-radius: 15px;\n    border: 2px dashed var(--theatrical-muted);\n}\n\n/* Editor Help */\n.editor-help {\n    background: rgba(114, 47, 55, 0.05);\n    border-left: 4px solid var(--theatrical-primary);\n}\n\n.help-section h6 {\n    font-family: var(--font-theatrical);\n    color: var(--theatrical-primary);\n    margin-bottom: 0.5rem;\n}\n\n.help-section code {\n    background: rgba(114, 47, 55, 0.1);\n    color: var(--theatrical-secondary);\n    padding: 0.2rem 0.4rem;\n    border-radius: 4px;\n    font-size: 0.85rem;\n}\n\n/* Pagination */\n.pagination .page-link {\n    color: var(--theatrical-primary);\n    border: 1px solid rgba(114, 47, 55, 0.2);\n    font-family: var(--font-theatrical);\n}\n\n.pagination .page-link:hover {\n    color: white;\n    background-color: var(--theatrical-primary);\n    border-color: var(--theatrical-primary);\n}\n\n.pagination .page-item.active .page-link {\n    background-color: var(--theatrical-primary);\n    border-color: var(--theatrical-primary);\n}\n\n/* Alerts */\n.alert {\n    border: none;\n    border-radius: 10px;\n    border-left: 4px solid;\n}\n\n.alert-success {\n    background-color: rgba(40, 167, 69, 0.1);\n    border-left-color: #28a745;\n    color: #155724;\n}\n\n.alert-danger {\n    background-color: rgba(220, 53, 69, 0.1);\n    border-left-color: #dc3545;\n    color: #721c24;\n}\n\n.alert-info {\n    background-color: rgba(114, 47, 55, 0.1);\n    border-left-color: var(--theatrical-primary);\n    color: var(--theatrical-dark);\n}\n\n.alert-warning {\n    background-color: rgba(212, 175, 55, 0.1);\n    border-left-color: var(--theatrical-accent);\n    color: #856404;\n}\n\n/* Responsive Design */\n@media (max-width: 768px) {\n    .site-title {\n        font-size: 1.8rem;\n    }\n    \n    .slogan {\n        font-size: 1rem;\n    }\n    \n    .logo {\n        max-width: 50px;\n        max-height: 50px;\n    }\n    \n    .nav-link {\n        font-size: 1rem;\n        padding: 0.5rem !important;\n    }\n    \n    .btn-theatrical,\n    .btn-outline-theatrical {\n        padding: 0.5rem 1.5rem;\n        font-size: 0.9rem;\n    }\n    \n    .cta-buttons .btn {\n        display: block;\n        width: 100%;\n        margin: 0.5rem 0;\n    }\n}\n\n@media (max-width: 576px) {\n    .theatrical-header .row {\n        text-align: center;\n    }\n    \n    .theatrical-header .col-auto,\n    .theatrical-header .col {\n        flex: 0 0 100%;\n        max-width: 100%;\n        margin-bottom: 1rem;\n    }\n    \n    .navbar {\n        margin-top: 1rem;\n    }\n    \n    .stat-card {\n        flex-direction: column;\n        text-align: center;\n    }\n    \n    .stat-icon {\n        margin-bottom: 0.5rem;\n    }\n}\n\n/* Print Styles */\n@media print {\n    .theatrical-header,\n    .theatrical-footer,\n    .btn,\n    .navbar {\n        display: none !important;\n    }\n    \n    body {\n        background: white !important;\n        color: black !important;\n    }\n    \n    .text-theatrical {\n        color: black !important;\n    }\n}\n\n/* High Contrast Mode */\n@media (prefers-contrast: high) {\n    :root {\n        --theatrical-primary: #000000;\n        --theatrical-secondary: #333333;\n        --theatrical-accent: #FFD700;\n        --theatrical-dark: #000000;\n        --theatrical-light: #FFFFFF;\n        --theatrical-muted: #666666;\n    }\n}\n\n/* Reduced Motion */\n@media (prefers-reduced-motion: reduce) {\n    *,\n    *::before,\n    *::after {\n        animation-duration: 0.01ms !important;\n        animation-iteration-count: 1 !important;\n        transition-duration: 0.01ms !important;\n    }\n}\n\n/* Focus Styles for Accessibility */\n*:focus {\n    outline: 2px solid var(--theatrical-accent);\n    outline-offset: 2px;\n}\n\n.btn:focus {\n    box-shadow: 0 0 0 0.2rem rgba(114, 47, 55, 0.5);\n}\n\n/* Loading Animation */\n@keyframes theatrical-pulse {\n    0% {\n        opacity: 1;\n    }\n    50% {\n        opacity: 0.5;\n    }\n    100% {\n        opacity: 1;\n    }\n}\n\n.loading {\n    animation: theatrical-pulse 1.5s ease-in-out infinite;\n}\n\n/* Scroll Behavior */\nhtml {\n    scroll-behavior: smooth;\n}\n\n/* Custom Scrollbar */\n::-webkit-scrollbar {\n    width: 8px;\n}\n\n::-webkit-scrollbar-track {\n    background: var(--theatrical-light);\n}\n\n::-webkit-scrollbar-thumb {\n    background: var(--theatrical-primary);\n    border-radius: 4px;\n}\n\n::-webkit-scrollbar-thumb:hover {\n    background: var(--theatrical-secondary);\n}\n","size_bytes":19645},"static/js/admin.js":{"content":"/**\n * Grand Stage Productions - Admin Panel JavaScript\n * Enhanced functionality for the CMS admin interface\n */\n\ndocument.addEventListener('DOMContentLoaded', function() {\n    console.log('Grand Stage Productions Admin Panel Initialized');\n    \n    // Initialize all admin functionality\n    initializeImagePreview();\n    initializeVideoPreview();\n    initializeFormValidation();\n    initializeContentEditor();\n    initializeTooltips();\n    initializeSortableElements();\n    initializeConfirmDialogs();\n    initializeAutoSave();\n    initializeLivePreview();\n});\n\n/**\n * Image Preview Functionality\n */\nfunction initializeImagePreview() {\n    const imageUrlFields = document.querySelectorAll('input[name=\"image_url\"]');\n    \n    imageUrlFields.forEach(field => {\n        const previewContainer = document.getElementById('imagePreview');\n        if (!previewContainer) return;\n        \n        // Initial preview load\n        if (field.value) {\n            updateImagePreview(field.value, previewContainer);\n        }\n        \n        // Live preview on input\n        field.addEventListener('input', debounce(function() {\n            const url = this.value.trim();\n            updateImagePreview(url, previewContainer);\n        }, 500));\n        \n        // Validate URL on blur\n        field.addEventListener('blur', function() {\n            validateImageUrl(this);\n        });\n    });\n}\n\nfunction updateImagePreview(url, container) {\n    if (!url || (!url.startsWith('http://') && !url.startsWith('https://'))) {\n        container.innerHTML = `\n            <div class=\"preview-placeholder p-4\">\n                <i class=\"fas fa-image fa-3x text-muted mb-2\"></i>\n                <p class=\"text-muted\">Enter an image URL to see preview</p>\n            </div>\n        `;\n        return;\n    }\n    \n    // Show loading state\n    container.innerHTML = `\n        <div class=\"preview-placeholder p-4\">\n            <div class=\"spinner-border text-primary\" role=\"status\">\n                <span class=\"visually-hidden\">Loading...</span>\n            </div>\n            <p class=\"text-muted mt-2\">Loading preview...</p>\n        </div>\n    `;\n    \n    // Create image element to test loading\n    const img = new Image();\n    img.onload = function() {\n        container.innerHTML = `\n            <img src=\"${url}\" alt=\"Preview\" class=\"img-fluid rounded shadow mb-2\" style=\"max-height: 200px;\">\n            <p class=\"small text-muted\">Image preview</p>\n        `;\n    };\n    \n    img.onerror = function() {\n        container.innerHTML = `\n            <div class=\"preview-placeholder p-4\">\n                <i class=\"fas fa-exclamation-triangle fa-3x text-warning mb-2\"></i>\n                <p class=\"text-warning\">Invalid image URL or image not accessible</p>\n                <small class=\"text-muted\">Please check the URL and try again</small>\n            </div>\n        `;\n    };\n    \n    img.src = url;\n}\n\nfunction validateImageUrl(field) {\n    const url = field.value.trim();\n    const feedbackElement = field.parentElement.querySelector('.invalid-feedback') || \n                           createFeedbackElement(field);\n    \n    if (!url) {\n        field.classList.remove('is-invalid', 'is-valid');\n        return;\n    }\n    \n    if (!isValidUrl(url)) {\n        field.classList.add('is-invalid');\n        field.classList.remove('is-valid');\n        feedbackElement.textContent = 'Please enter a valid URL (must start with http:// or https://)';\n    } else {\n        field.classList.add('is-valid');\n        field.classList.remove('is-invalid');\n        feedbackElement.textContent = '';\n    }\n}\n\n/**\n * Video Preview Functionality\n */\nfunction initializeVideoPreview() {\n    const videoUrlFields = document.querySelectorAll('input[name=\"video_url\"]');\n    const videoTypeFields = document.querySelectorAll('select[name=\"video_type\"]');\n    \n    videoUrlFields.forEach(field => {\n        const previewContainer = document.getElementById('videoPreview');\n        if (!previewContainer) return;\n        \n        const typeField = document.querySelector('select[name=\"video_type\"]');\n        \n        // Initial preview load\n        if (field.value && typeField && typeField.value) {\n            updateVideoPreview(field.value, typeField.value, previewContainer);\n        }\n        \n        // Live preview on input\n        field.addEventListener('input', debounce(function() {\n            const url = this.value.trim();\n            const type = typeField ? typeField.value : 'youtube';\n            updateVideoPreview(url, type, previewContainer);\n        }, 500));\n        \n        // Validate URL on blur\n        field.addEventListener('blur', function() {\n            validateVideoUrl(this);\n        });\n    });\n    \n    // Update preview when video type changes\n    videoTypeFields.forEach(field => {\n        field.addEventListener('change', function() {\n            const urlField = document.querySelector('input[name=\"video_url\"]');\n            const previewContainer = document.getElementById('videoPreview');\n            if (urlField && previewContainer) {\n                updateVideoPreview(urlField.value, this.value, previewContainer);\n            }\n        });\n    });\n}\n\nfunction updateVideoPreview(url, type, container) {\n    if (!url || !isValidUrl(url)) {\n        container.innerHTML = `\n            <div class=\"preview-placeholder p-4\">\n                <i class=\"fas fa-video fa-3x text-muted mb-2\"></i>\n                <p class=\"text-muted\">Enter a video URL to see preview</p>\n            </div>\n        `;\n        return;\n    }\n    \n    const embedUrl = convertToEmbedUrl(url, type);\n    if (!embedUrl) {\n        container.innerHTML = `\n            <div class=\"preview-placeholder p-4\">\n                <i class=\"fas fa-exclamation-triangle fa-3x text-warning mb-2\"></i>\n                <p class=\"text-warning\">Invalid ${type} URL</p>\n                <small class=\"text-muted\">Please check the URL format</small>\n            </div>\n        `;\n        return;\n    }\n    \n    container.innerHTML = `\n        <div class=\"video-embed-container\">\n            <iframe src=\"${embedUrl}\" \n                    title=\"Video Preview\" \n                    frameborder=\"0\" \n                    allowfullscreen\n                    loading=\"lazy\"></iframe>\n        </div>\n        <p class=\"small text-muted mt-2\">Video preview</p>\n    `;\n}\n\nfunction convertToEmbedUrl(url, type) {\n    if (type === 'youtube') {\n        if (url.includes('watch?v=')) {\n            const videoId = url.split('watch?v=')[1].split('&')[0];\n            return `https://www.youtube.com/embed/${videoId}`;\n        } else if (url.includes('youtu.be/')) {\n            const videoId = url.split('youtu.be/')[1].split('?')[0];\n            return `https://www.youtube.com/embed/${videoId}`;\n        }\n    } else if (type === 'instagram') {\n        if (url.includes('/p/') || url.includes('/reel/')) {\n            return url.endsWith('/') ? url + 'embed/' : url + '/embed/';\n        }\n    }\n    return null;\n}\n\nfunction validateVideoUrl(field) {\n    const url = field.value.trim();\n    const typeField = document.querySelector('select[name=\"video_type\"]');\n    const type = typeField ? typeField.value : 'youtube';\n    const feedbackElement = field.parentElement.querySelector('.invalid-feedback') || \n                           createFeedbackElement(field);\n    \n    if (!url) {\n        field.classList.remove('is-invalid', 'is-valid');\n        return;\n    }\n    \n    if (!isValidUrl(url)) {\n        field.classList.add('is-invalid');\n        field.classList.remove('is-valid');\n        feedbackElement.textContent = 'Please enter a valid URL';\n        return;\n    }\n    \n    const embedUrl = convertToEmbedUrl(url, type);\n    if (!embedUrl) {\n        field.classList.add('is-invalid');\n        field.classList.remove('is-valid');\n        feedbackElement.textContent = `Please enter a valid ${type} URL`;\n    } else {\n        field.classList.add('is-valid');\n        field.classList.remove('is-invalid');\n        feedbackElement.textContent = '';\n    }\n}\n\n/**\n * Form Validation Enhancement\n */\nfunction initializeFormValidation() {\n    const forms = document.querySelectorAll('form');\n    \n    forms.forEach(form => {\n        // Real-time validation\n        const inputs = form.querySelectorAll('input, textarea, select');\n        inputs.forEach(input => {\n            input.addEventListener('blur', function() {\n                validateField(this);\n            });\n            \n            // Clear validation state on focus\n            input.addEventListener('focus', function() {\n                this.classList.remove('is-invalid', 'is-valid');\n                const feedback = this.parentElement.querySelector('.invalid-feedback');\n                if (feedback) feedback.textContent = '';\n            });\n        });\n        \n        // Form submission validation\n        form.addEventListener('submit', function(e) {\n            let isValid = true;\n            \n            inputs.forEach(input => {\n                if (!validateField(input)) {\n                    isValid = false;\n                }\n            });\n            \n            if (!isValid) {\n                e.preventDefault();\n                showNotification('Please fix the errors before submitting', 'error');\n                \n                // Focus first invalid field\n                const firstInvalid = form.querySelector('.is-invalid');\n                if (firstInvalid) {\n                    firstInvalid.focus();\n                    firstInvalid.scrollIntoView({ behavior: 'smooth', block: 'center' });\n                }\n            }\n        });\n    });\n}\n\nfunction validateField(field) {\n    const value = field.value.trim();\n    const type = field.type;\n    const required = field.hasAttribute('required');\n    const feedbackElement = field.parentElement.querySelector('.invalid-feedback') || \n                           createFeedbackElement(field);\n    \n    // Required field validation\n    if (required && !value) {\n        field.classList.add('is-invalid');\n        field.classList.remove('is-valid');\n        feedbackElement.textContent = 'This field is required';\n        return false;\n    }\n    \n    // Skip validation if field is empty and not required\n    if (!value && !required) {\n        field.classList.remove('is-invalid', 'is-valid');\n        return true;\n    }\n    \n    // Type-specific validation\n    let isValid = true;\n    let errorMessage = '';\n    \n    switch (type) {\n        case 'email':\n            if (!isValidEmail(value)) {\n                isValid = false;\n                errorMessage = 'Please enter a valid email address';\n            }\n            break;\n            \n        case 'url':\n            if (!isValidUrl(value)) {\n                isValid = false;\n                errorMessage = 'Please enter a valid URL (must start with http:// or https://)';\n            }\n            break;\n            \n        case 'number':\n            if (isNaN(value) || value < 0) {\n                isValid = false;\n                errorMessage = 'Please enter a valid positive number';\n            }\n            break;\n    }\n    \n    // Field-specific validation\n    if (field.name === 'sort_order' && value && (isNaN(value) || value < 0 || value > 999)) {\n        isValid = false;\n        errorMessage = 'Sort order must be a number between 0 and 999';\n    }\n    \n    // Update field state\n    if (isValid) {\n        field.classList.add('is-valid');\n        field.classList.remove('is-invalid');\n        feedbackElement.textContent = '';\n    } else {\n        field.classList.add('is-invalid');\n        field.classList.remove('is-valid');\n        feedbackElement.textContent = errorMessage;\n    }\n    \n    return isValid;\n}\n\n/**\n * Content Editor Enhancement\n */\nfunction initializeContentEditor() {\n    const contentEditor = document.getElementById('contentEditor');\n    if (!contentEditor) return;\n    \n    // Auto-resize textarea\n    contentEditor.style.minHeight = '400px';\n    contentEditor.addEventListener('input', function() {\n        this.style.height = 'auto';\n        this.style.height = Math.max(400, this.scrollHeight) + 'px';\n    });\n    \n    // Add formatting buttons\n    addFormattingToolbar(contentEditor);\n    \n    // Add character count\n    addCharacterCounter(contentEditor);\n    \n    // Add HTML syntax highlighting (basic)\n    addBasicSyntaxHighlighting(contentEditor);\n}\n\nfunction addFormattingToolbar(textarea) {\n    const toolbar = document.createElement('div');\n    toolbar.className = 'editor-toolbar mb-2';\n    toolbar.innerHTML = `\n        <div class=\"btn-group btn-group-sm\" role=\"group\">\n            <button type=\"button\" class=\"btn btn-outline-secondary\" data-format=\"h2\" title=\"Heading\">\n                <i class=\"fas fa-heading\"></i>\n            </button>\n            <button type=\"button\" class=\"btn btn-outline-secondary\" data-format=\"p\" title=\"Paragraph\">\n                <i class=\"fas fa-paragraph\"></i>\n            </button>\n            <button type=\"button\" class=\"btn btn-outline-secondary\" data-format=\"strong\" title=\"Bold\">\n                <i class=\"fas fa-bold\"></i>\n            </button>\n            <button type=\"button\" class=\"btn btn-outline-secondary\" data-format=\"em\" title=\"Italic\">\n                <i class=\"fas fa-italic\"></i>\n            </button>\n            <button type=\"button\" class=\"btn btn-outline-secondary\" data-format=\"link\" title=\"Link\">\n                <i class=\"fas fa-link\"></i>\n            </button>\n        </div>\n    `;\n    \n    textarea.parentNode.insertBefore(toolbar, textarea);\n    \n    // Add click handlers\n    toolbar.addEventListener('click', function(e) {\n        const button = e.target.closest('button[data-format]');\n        if (button) {\n            insertFormatting(textarea, button.dataset.format);\n        }\n    });\n}\n\nfunction insertFormatting(textarea, format) {\n    const start = textarea.selectionStart;\n    const end = textarea.selectionEnd;\n    const selectedText = textarea.value.substring(start, end);\n    let replacement = '';\n    \n    switch (format) {\n        case 'h2':\n            replacement = `<h2 class=\"text-theatrical mb-3\">${selectedText || 'Heading'}</h2>`;\n            break;\n        case 'p':\n            replacement = `<p>${selectedText || 'Paragraph text'}</p>`;\n            break;\n        case 'strong':\n            replacement = `<strong>${selectedText || 'Bold text'}</strong>`;\n            break;\n        case 'em':\n            replacement = `<em>${selectedText || 'Italic text'}</em>`;\n            break;\n        case 'link':\n            const url = prompt('Enter URL:', 'https://');\n            if (url) {\n                replacement = `<a href=\"${url}\">${selectedText || 'Link text'}</a>`;\n            } else {\n                return;\n            }\n            break;\n    }\n    \n    textarea.value = textarea.value.substring(0, start) + replacement + textarea.value.substring(end);\n    textarea.focus();\n    \n    // Set cursor position after inserted text\n    const newPos = start + replacement.length;\n    textarea.setSelectionRange(newPos, newPos);\n    \n    // Trigger input event for auto-resize\n    textarea.dispatchEvent(new Event('input'));\n}\n\nfunction addCharacterCounter(textarea) {\n    const counter = document.createElement('small');\n    counter.className = 'text-muted character-counter';\n    textarea.parentNode.appendChild(counter);\n    \n    function updateCounter() {\n        const length = textarea.value.length;\n        counter.textContent = `${length} characters`;\n        \n        if (length > 10000) {\n            counter.className = 'text-warning character-counter';\n        } else if (length > 15000) {\n            counter.className = 'text-danger character-counter';\n        } else {\n            counter.className = 'text-muted character-counter';\n        }\n    }\n    \n    textarea.addEventListener('input', updateCounter);\n    updateCounter();\n}\n\nfunction addBasicSyntaxHighlighting(textarea) {\n    // Simple HTML tag highlighting on focus out\n    textarea.addEventListener('blur', function() {\n        const content = this.value;\n        const htmlTags = content.match(/<[^>]+>/g);\n        \n        if (htmlTags) {\n            // Add visual feedback for HTML tags (could be enhanced with a proper syntax highlighter)\n            console.log('HTML tags detected:', htmlTags.length);\n        }\n    });\n}\n\n/**\n * Tooltips Initialization\n */\nfunction initializeTooltips() {\n    // Initialize Bootstrap tooltips if available\n    if (typeof bootstrap !== 'undefined' && bootstrap.Tooltip) {\n        const tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle=\"tooltip\"]'));\n        tooltipTriggerList.map(function (tooltipTriggerEl) {\n            return new bootstrap.Tooltip(tooltipTriggerEl);\n        });\n    }\n    \n    // Add custom tooltips for form help\n    const helpTexts = document.querySelectorAll('.form-text');\n    helpTexts.forEach(helpText => {\n        helpText.style.cursor = 'help';\n    });\n}\n\n/**\n * Sortable Elements (for future drag-and-drop functionality)\n */\nfunction initializeSortableElements() {\n    const sortableContainers = document.querySelectorAll('.sortable');\n    \n    sortableContainers.forEach(container => {\n        // Basic visual feedback for sortable items\n        const items = container.querySelectorAll('.sortable-item');\n        items.forEach(item => {\n            item.style.cursor = 'move';\n            item.title = 'Drag to reorder';\n        });\n    });\n}\n\n/**\n * Confirmation Dialogs\n */\nfunction initializeConfirmDialogs() {\n    const deleteButtons = document.querySelectorAll('button[onclick*=\"confirm\"], form[onsubmit*=\"confirm\"]');\n    \n    deleteButtons.forEach(button => {\n        button.addEventListener('click', function(e) {\n            if (this.onclick && this.onclick.toString().includes('confirm')) {\n                return; // Let the original onclick handle it\n            }\n            \n            const action = this.textContent.toLowerCase();\n            const isDelete = action.includes('delete') || action.includes('remove');\n            \n            if (isDelete) {\n                const confirmed = confirm('Are you sure you want to delete this item? This action cannot be undone.');\n                if (!confirmed) {\n                    e.preventDefault();\n                }\n            }\n        });\n    });\n}\n\n/**\n * Auto-save Functionality\n */\nfunction initializeAutoSave() {\n    const forms = document.querySelectorAll('form[data-autosave]');\n    \n    forms.forEach(form => {\n        const inputs = form.querySelectorAll('input, textarea, select');\n        let saveTimeout;\n        \n        inputs.forEach(input => {\n            input.addEventListener('input', function() {\n                clearTimeout(saveTimeout);\n                saveTimeout = setTimeout(() => {\n                    autoSaveForm(form);\n                }, 2000);\n            });\n        });\n    });\n}\n\nfunction autoSaveForm(form) {\n    const formData = new FormData(form);\n    const data = Object.fromEntries(formData.entries());\n    \n    // Save to localStorage\n    const formId = form.id || 'autosave_form';\n    localStorage.setItem(`autosave_${formId}`, JSON.stringify(data));\n    \n    showNotification('Draft saved automatically', 'info', 2000);\n}\n\n/**\n * Live Preview Functionality\n */\nfunction initializeLivePreview() {\n    const previewButtons = document.querySelectorAll('.btn[target=\"_blank\"]');\n    \n    previewButtons.forEach(button => {\n        button.addEventListener('click', function(e) {\n            // Add loading state\n            const originalText = this.innerHTML;\n            this.innerHTML = '<i class=\"fas fa-spinner fa-spin me-2\"></i>Opening...';\n            this.disabled = true;\n            \n            setTimeout(() => {\n                this.innerHTML = originalText;\n                this.disabled = false;\n            }, 2000);\n        });\n    });\n}\n\n/**\n * Utility Functions\n */\nfunction debounce(func, wait) {\n    let timeout;\n    return function executedFunction(...args) {\n        const later = () => {\n            clearTimeout(timeout);\n            func(...args);\n        };\n        clearTimeout(timeout);\n        timeout = setTimeout(later, wait);\n    };\n}\n\nfunction isValidUrl(string) {\n    try {\n        const url = new URL(string);\n        return url.protocol === 'http:' || url.protocol === 'https:';\n    } catch (_) {\n        return false;\n    }\n}\n\nfunction isValidEmail(email) {\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n    return emailRegex.test(email);\n}\n\nfunction createFeedbackElement(field) {\n    const feedback = document.createElement('div');\n    feedback.className = 'invalid-feedback';\n    field.parentNode.appendChild(feedback);\n    return feedback;\n}\n\nfunction showNotification(message, type = 'info', duration = 5000) {\n    // Create notification element\n    const notification = document.createElement('div');\n    notification.className = `alert alert-${type} alert-dismissible fade show position-fixed`;\n    notification.style.cssText = `\n        top: 20px;\n        right: 20px;\n        z-index: 9999;\n        min-width: 300px;\n        box-shadow: 0 4px 20px rgba(0,0,0,0.15);\n    `;\n    \n    notification.innerHTML = `\n        ${message}\n        <button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"alert\"></button>\n    `;\n    \n    document.body.appendChild(notification);\n    \n    // Auto-remove after duration\n    setTimeout(() => {\n        if (notification.parentNode) {\n            notification.remove();\n        }\n    }, duration);\n}\n\n/**\n * Image Gallery Modal Enhancement\n */\ndocument.addEventListener('DOMContentLoaded', function() {\n    const galleryImages = document.querySelectorAll('.gallery-image[data-bs-toggle=\"modal\"]');\n    \n    galleryImages.forEach(img => {\n        img.addEventListener('click', function() {\n            // Add loading state to modal\n            const modalId = this.getAttribute('data-bs-target');\n            const modal = document.querySelector(modalId);\n            if (modal) {\n                const modalBody = modal.querySelector('.modal-body');\n                const originalContent = modalBody.innerHTML;\n                \n                modalBody.innerHTML = `\n                    <div class=\"text-center p-4\">\n                        <div class=\"spinner-border text-primary\" role=\"status\">\n                            <span class=\"visually-hidden\">Loading...</span>\n                        </div>\n                        <p class=\"mt-2\">Loading image...</p>\n                    </div>\n                `;\n                \n                // Restore content after a brief delay\n                setTimeout(() => {\n                    modalBody.innerHTML = originalContent;\n                }, 500);\n            }\n        });\n    });\n});\n\n/**\n * Admin Dashboard Stats Animation\n */\ndocument.addEventListener('DOMContentLoaded', function() {\n    const statNumbers = document.querySelectorAll('.stat-info h4');\n    \n    const animateCounter = (element, target) => {\n        let current = 0;\n        const increment = target / 20;\n        const timer = setInterval(() => {\n            current += increment;\n            if (current >= target) {\n                element.textContent = target;\n                clearInterval(timer);\n            } else {\n                element.textContent = Math.floor(current);\n            }\n        }, 50);\n    };\n    \n    // Animate counters on page load\n    statNumbers.forEach(stat => {\n        const target = parseInt(stat.textContent);\n        if (!isNaN(target)) {\n            stat.textContent = '0';\n            setTimeout(() => animateCounter(stat, target), 200);\n        }\n    });\n});\n\n/**\n * Keyboard Shortcuts\n */\ndocument.addEventListener('keydown', function(e) {\n    // Ctrl/Cmd + S to save form\n    if ((e.ctrlKey || e.metaKey) && e.key === 's') {\n        e.preventDefault();\n        const submitButton = document.querySelector('form input[type=\"submit\"], form button[type=\"submit\"]');\n        if (submitButton) {\n            submitButton.click();\n            showNotification('Form saved!', 'success');\n        }\n    }\n    \n    // Escape to cancel/go back\n    if (e.key === 'Escape') {\n        const backButton = document.querySelector('a[href*=\"dashboard\"], a[href*=\"admin\"]');\n        if (backButton && confirm('Go back to dashboard?')) {\n            window.location.href = backButton.href;\n        }\n    }\n});\n\nconsole.log('Grand Stage Productions Admin Panel JavaScript loaded successfully');\n","size_bytes":24423},"email_utils.py":{"content":"import smtplib\nfrom email.mime.text import MIMEText\nfrom email.mime.multipart import MIMEMultipart\nfrom models import EmailCredentials\nfrom app import db\n\ndef get_email_credentials():\n    \"\"\"Get the current email credentials from database\"\"\"\n    return EmailCredentials.query.first()\n\ndef send_email(to_email, subject, html_content, text_content=None):\n    \"\"\"Send an email using stored credentials\"\"\"\n    credentials = get_email_credentials()\n    \n    if not credentials:\n        return False, \"No email credentials configured\"\n    \n    try:\n        # Create message\n        msg = MIMEMultipart('alternative')\n        msg['From'] = credentials.email_address\n        msg['To'] = to_email\n        msg['Subject'] = subject\n        \n        # Add text content if provided\n        if text_content:\n            text_part = MIMEText(text_content, 'plain')\n            msg.attach(text_part)\n        \n        # Add HTML content\n        html_part = MIMEText(html_content, 'html')\n        msg.attach(html_part)\n        \n        # Connect to SMTP server\n        server = smtplib.SMTP(credentials.smtp_server, credentials.smtp_port)\n        server.starttls()\n        server.login(credentials.email_address, credentials.app_password)\n        \n        # Send email\n        text = msg.as_string()\n        server.sendmail(credentials.email_address, to_email, text)\n        server.quit()\n        \n        return True, \"Email sent successfully\"\n        \n    except Exception as e:\n        return False, f\"Failed to send email: {str(e)}\"\n\ndef send_contact_notification(submission):\n    \"\"\"Send notification emails for contact form submission\"\"\"\n    credentials = get_email_credentials()\n    if not credentials:\n        return False, \"No email credentials configured\"\n    \n    # Send thank you email to the person who contacted us\n    thank_you_subject = \"Thank you for contacting Grand Stage Productions\"\n    thank_you_html = f\"\"\"\n    <html>\n    <body style=\"font-family: Arial, sans-serif; color: #333; line-height: 1.6;\">\n        <div style=\"max-width: 600px; margin: 0 auto; padding: 20px; border: 2px solid #722F37; border-radius: 10px;\">\n            <div style=\"text-align: center; margin-bottom: 30px;\">\n                <h1 style=\"color: #722F37; font-family: 'Cinzel', serif;\">Grand Stage Productions</h1>\n                <p style=\"color: #8B1538; font-style: italic; font-size: 16px;\">Bringing stories to life</p>\n            </div>\n            \n            <h2 style=\"color: #722F37;\">Thank you for reaching out!</h2>\n            \n            <p>Dear {submission.name},</p>\n            \n            <p>Thank you for contacting Grand Stage Productions. We have received your message and will get back to you as soon as possible.</p>\n            \n            <div style=\"background-color: #f8f8f8; padding: 15px; border-left: 4px solid #722F37; margin: 20px 0;\">\n                <h3 style=\"color: #722F37; margin-top: 0;\">Your Message Summary:</h3>\n                <p><strong>Subject:</strong> {submission.subject}</p>\n                <p><strong>Message:</strong><br>{submission.message}</p>\n            </div>\n            \n            <p>We appreciate your interest in our theater group and look forward to connecting with you.</p>\n            \n            <p>Best regards,<br>\n            <strong>Grand Stage Productions Team</strong></p>\n            \n            <hr style=\"border: none; border-top: 2px solid #722F37; margin: 30px 0;\">\n            <p style=\"font-size: 12px; color: #666; text-align: center;\">\n                This is an automated response. Please do not reply to this email.\n            </p>\n        </div>\n    </body>\n    </html>\n    \"\"\"\n    \n    thank_you_text = f\"\"\"\n    Thank you for contacting Grand Stage Productions!\n    \n    Dear {submission.name},\n    \n    Thank you for reaching out to us. We have received your message about \"{submission.subject}\" and will get back to you as soon as possible.\n    \n    Your Message:\n    {submission.message}\n    \n    We appreciate your interest in our theater group and look forward to connecting with you.\n    \n    Best regards,\n    Grand Stage Productions Team\n    \"\"\"\n    \n    # Send internal notification email\n    internal_subject = f\"New Contact Form Submission: {submission.subject}\"\n    internal_html = f\"\"\"\n    <html>\n    <body style=\"font-family: Arial, sans-serif; color: #333; line-height: 1.6;\">\n        <div style=\"max-width: 600px; margin: 0 auto; padding: 20px; border: 2px solid #722F37; border-radius: 10px;\">\n            <h2 style=\"color: #722F37;\">New Contact Form Submission</h2>\n            \n            <div style=\"background-color: #f8f8f8; padding: 15px; border-radius: 5px; margin: 20px 0;\">\n                <h3 style=\"color: #722F37; margin-top: 0;\">Contact Details:</h3>\n                <p><strong>Name:</strong> {submission.name}</p>\n                <p><strong>Email:</strong> {submission.email}</p>\n                <p><strong>Subject:</strong> {submission.subject}</p>\n                <p><strong>Submitted:</strong> {submission.submitted_at.strftime('%B %d, %Y at %I:%M %p')}</p>\n            </div>\n            \n            <div style=\"background-color: #fff; padding: 15px; border-left: 4px solid #722F37; margin: 20px 0;\">\n                <h3 style=\"color: #722F37; margin-top: 0;\">Message:</h3>\n                <p>{submission.message}</p>\n            </div>\n            \n            <p><em>Please respond to this inquiry promptly.</em></p>\n        </div>\n    </body>\n    </html>\n    \"\"\"\n    \n    # Send both emails\n    success_user, msg_user = send_email(submission.email, thank_you_subject, thank_you_html, thank_you_text)\n    success_admin, msg_admin = send_email(credentials.email_address, internal_subject, internal_html)\n    \n    return success_user and success_admin, f\"User email: {msg_user}, Admin email: {msg_admin}\"","size_bytes":5812}}}